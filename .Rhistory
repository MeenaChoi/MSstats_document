load("/Users/Meena/Dropbox/Research/Meena-MSstatsv3-test/spike-data/label_free_latinsquare/20150618/input1_topn/raw.RData")
setwd("/Users/Meena/Dropbox/MSstats_GitHub_document")
head(raw)
dim(raw)
raw<-raw[,-11]
head(raw)
DDA2009.superhirn<-raw
head(DDA2009.superhirn)
save(DDA2009.superhirn, file="DDA2009.superhirn.RData")
load("/Users/Meena/Dropbox/Research/Meena-MSstatsv3-test/spike-data/label_free_latinsquare/20150822_skyline/sum_input1_topn/raw.RData")
head(raw)
colnames(raw)
raw<-raw[,c(4,5,6,9,10,11,8,7,1,3),]
head(Raw)
head(raw)
sum(is.na(raw$Intensity))
sum(!is.na(raw$Intensity) & raw$Intensity==0)
sum(!is.na(raw$Intensity) & raw$Intensity==1)
raw[!is.na(raw$Intensity) & raw$Intensity==1,"Intensity"]<-0
sum(!is.na(raw$Intensity) & raw$Intensity==0)
sum(!is.na(raw$Intensity) & raw$Intensity==1)
head(raw)
DDA2009.skyline<-raw
head(DDA2009.skyline)
save(DDA2009.skyline, file="DDA2009.skyline.RData")
setwd('/Users/Meena/Dropbox/MSstats_GitHub_document')
getwd()
library('MSstats', warn.conflicts = F, quietly = T, verbose = F)
?MSstats
proteinGroups<-read.table("DDA2014_proteinGroups.txt", sep="\t", header=TRUE)
annot <- read.csv("DDA2014_annotation.csv", header=TRUE)
infile<-load("DDA2014_evidence.RData")
msstats.raw<-MaxQtoMSstatsFormat(evidence=infile, annotation=annot, proteinGroups=proteinGroups)
annot
head(infile)
names(infile)
load("/Users/Meena/Dropbox/MSstats_GitHub_material/example dataset/DDA_ControlledMixture2014/evidence.RData")
head(evidence)
DDA2014_evidence<-evidence
head(DDA2014_evidence)
save(DDA2014_evidence, file="DDA2014_evidence.RData")
infile<-load("DDA2014_evidence.RData")
head(infile)
head(DDA2014_evidence)
head(infile)
class(DDA2014_evidence)
DDA2014.evidence<-DDA2014_evidence
save(DDA2014.evidence, file="DDA2014.evidence.RData")
infile<-load("DDA2014.evidence.RData")
?infile
?load
infile<-load('DDA2014.evidence.RData')
rm(list=ls())
load('DDA2014.evidence.RData')
infile<-DDA2014.evidence
msstats.raw<-MaxQtoMSstatsFormat(evidence=infile, annotation=annot, proteinGroups=proteinGroups)
proteinGroups<-read.table("DDA2014_proteinGroups.txt", sep="\t", header=TRUE)
annot <- read.csv("DDA2014_annotation.csv", header=TRUE)
msstats.raw<-MaxQtoMSstatsFormat(evidence=infile, annotation=annot, proteinGroups=proteinGroups)
head(msstats.raw)
rm(list=ls())
?dataProcess
load("DDA2009.superhirn.RData")
head(DDA2009.superhirn)
DDAskyline.quant <- dataProcess(raw = DDA2009.superhirn,  fillIncompleteRows = TRUE,
normalization = 'equalizeMedians',
summaryMethod = 'TMP',
censoredInt="NA", cutoffCensored="minFeatureNRun",
MBimpute=TRUE)
names(DDAskyline.quant)
head(DDAskyline.quant$ProcessedData)
head(DDAskyline.quant$RunlevelData)
head(DDAskyline.quant$ModelQC)
head(DDAskyline.quant$SummaryMethod)
head(DDAskyline.quant$PredictBySurvival)
load("DDA2009.skyline.RData")
head(DDA2009.skyline)
DDA2009.TMP <- dataProcess(raw = DDA2009.superhirn,  fillIncompleteRows = TRUE,
normalization = 'equalizeMedians',
summaryMethod = 'TMP',
censoredInt="NA", cutoffCensored="minFeatureNRun",
MBimpute=TRUE)
names(DDA2009.TMP)
head(DDA2009.TMP$ProcessedData) # the data after reformatting and normalization
head(DDA2009.TMP$RunlevelData) # run-level summarized data
head(DDA2009.TMP$ModelQC) # Since this is not model-based, no model summary (here DDAskyline.quant$ModelQC=NULL). Only with 'summaryMethod="linear"'
head(DDA2009.TMP$SummaryMethod) # here 'TMP'
head(DDA2009.TMP$PredictBySurvival) # predict values by AFT with 'MBimpute=TRUE'
dataProcessPlots(data = DDA2009.TMP, type="QCplot")
dataProcessPlots(data = DDA2009.TMP, type="QCplot", ylimUp=35)
dataProcessPlots(data = DDA2009.TMP, type="QCplot", ylimUp=35,
which.Protein="yeast", address="yeast_eqmedians_")
dataProcessPlots(data = DDA2009.TMP, type="Profileplot",
featureName="NA", width=7, height=7, address="DDA2009.TMP_")
dataProcessPlots(data = DDA2009.TMP, type="Profileplot",  ylimUp=35,
featureName="NA", width=7, height=7, address="DDA2009.TMP_")
?dataProcessPlots
levels(DDA2009.TMP$ProcessedData$GROUP_ORIGINAL)
comparison1<-matrix(c(-1,1,0,0,0,0),nrow=1)
comparison2<-matrix(c(0,-1,1,0,0,0),nrow=1)
comparison3<-matrix(c(0,0,-1,1,0,0),nrow=1)
comparison4<-matrix(c(0,0,0,-1,1,0),nrow=1)
comparison5<-matrix(c(0,0,0,0,-1,1),nrow=1)
comparison6<-matrix(c(1,0,0,0,0,-1),nrow=1)
comparison<-rbind(comparison1,comparison2,comparison3,comparison4,comparison5,comparison6)
row.names(comparison)<-c("C2-C1","C3-C2","C4-C3","C5-C4","C6-C5","C1-C6")
Rats.comparisons <- groupComparison(contrast.matrix = comparison, data=DDA2009.TMP)
DDA2009.comparisons <- groupComparison(contrast.matrix = comparison, data=DDA2009.TMP)
names(DDA2009.comparisons)
namesDDA2009.comparisons$ComparisonResult)
names(DDA2009.comparisons$ComparisonResult)
DDA2009.comparisons$ComparisonResultDDA2009.comparisons$ComparisonResult$adj.pvalue < 0.05 ,]
SignificantProteins =
DDA2009.comparisons$ComparisonResultDDA2009.comparisons$ComparisonResult$adj.pvalue < 0.05 ,]
SignificantProteins =
DDA2009.comparisons$ComparisonResult[DDA2009.comparisons$ComparisonResult$adj.pvalue < 0.05 ,]
SignificantProteins
SignificantProteins =
DDA2009.comparisons$ComparisonResult[DDA2009.comparisons$ComparisonResult$adj.pvalue < 0.05 ,]
nrow(SignificantProteins)
names(DDA2009.comparisons)
groupComparisonPlots(data = DDA2009.comparisons$ComparisonResult, type = 'VolcanoPlot'
groupComparisonPlots(data = DDA2009.comparisons$ComparisonResult, type = 'VolcanoPlot')
groupComparisonPlots(data = DDA2009.comparisons$ComparisonResult, type = 'VolcanoPlot')
?groupComparisonPlots
groupComparisonPlots(data = DDA2009.comparisons$ComparisonResult, type = 'Heatmap')
DDA2009.linear <- dataProcess(raw = DDA2009.superhirn,
summaryMethod="linear", censoredInt=NULL)
DDA2009.linear.censored <- dataProcess(raw = DDA2009.superhirn,
summaryMethod="linear", censoredInt="NA")
dataProcessPlots(data = DDA2009.linear, type="Profileplot",  ylimUp=35,
featureName="NA", width=7, height=7,
originalPlot=FALSE, summaryPlot=TRUE,address="DDA2009_linear_")
dataProcessPlots(data = DDA2009.linear.censored, type="Profileplot",  ylimUp=35,
featureName="NA", width=7, height=7,
originalPlot=FALSE, summaryPlot=TRUE, address="DDA2009_linear_censored_")
DDA2009.TMP.random <- dataProcess(raw = DDA2009.superhirn,  fillIncompleteRows = TRUE,
normalization = 'equalizeMedians',
summaryMethod = 'TMP',
censoredInt=NULL)
dataProcessPlots(data = DDA2009.TMP.random, type="Profileplot",  ylimUp=35,
featureName="NA", width=7, height=7,
originalPlot=FALSE, summaryPlot=TRUE, address="DDA2009_TMP_random_")
DDA2009.TMP.random <- dataProcess(raw = DDA2009.superhirn,  fillIncompleteRows = TRUE,
normalization = 'equalizeMedians',
summaryMethod = 'TMP',
censoredInt=NULL, MBimpute=FALSE)
dataProcessPlots(data = DDA2009.TMP.random, type="Profileplot",  ylimUp=35,
featureName="NA", width=7, height=7,
originalPlot=FALSE, summaryPlot=TRUE, address="DDA2009_TMP_random_")
raw<-read.csv(file="ControlMixerMSstatsInput.csv")
head(raw)
raw<-read.csv(file="ControlMixerMSstatsInputfromskyline.csv")
head(raw)
colnames(raw)[9] <- 'Run'
colnames(raw)[10] <- 'Intensity'
head(raw)
class(raw$Intensity)
sum(raw$Intensity==0) # 4326
sum(is.na(raw$Intensity))
raw$pepprecursor<-paste(raw$PeptideSequence, raw$PrecursorCharge, sep="_")
data_w = dcast( Run ~ pepprecursor, data=raw, value.var='Intensity', fun.aggregate=sum, fill=NULL)
library(reshape2)
data_w = dcast( Run ~ pepprecursor, data=raw, value.var='Intensity', fun.aggregate=sum, fill=NULL)
data_w[1:5,1:5]
newdata = melt(data_w, id.vars=c('Run'))
head(newdata)
colnames(newdata)[colnames(newdata) %in% c("variable","value")]<-c('pepprecursor','Intensity')
dim(newdata)
uniinfo<-unique(raw[,c("ProteinName","PeptideSequence","PrecursorCharge","pepprecursor")])
newraw<-merge(newdata,uniinfo, by="pepprecursor")
dim(newraw)
head(newraw)
uniinfo<-unique(raw[,c("Run","BioReplicate","Condition")])
newraw<-merge(newraw,uniinfo, by="Run")
dim(newraw)
head(newraw)
raw<-read.csv(file="ControlMixerMSstatsInputfromskyline.csv")
head(raw)
dim(raw)
sum(!raw$Truncated)
sum(raw$Truncated)
sum(raw$Truncated==TRUE)
sum(raw$Truncated=="True")
sum(raw$Truncated=="False")
raw$pepprecursor<-paste(raw$PeptideSequence, raw$PrecursorCharge, sep="_")
data_w = dcast( Run ~ pepprecursor, data=raw, value.var='Intensity', fun.aggregate=sum, fill=NULL)
newdata = melt(data_w, id.vars=c('Run'))
colnames(newdata)[colnames(newdata) %in% c("variable","value")]<-c('pepprecursor','Intensity')
uniinfo<-unique(raw[,c("ProteinName","PeptideSequence","PrecursorCharge","pepprecursor")])
newraw<-merge(newdata,uniinfo, by="pepprecursor")
uniinfo<-unique(raw[,c("Run","BioReplicate","Condition")])
newraw<-merge(newraw,uniinfo, by="Run")
newraw$BioReplicate<-1
newraw$FragmentIon<-"sum"
newraw$ProductCharge<-NA
newraw$IsotopeLabelType<-"L"
raw<-read.csv(file="ControlMixerMSstatsInputfromskyline.csv")
head(raw)
colnames(raw)[9] <- 'Run'
colnames(raw)[10] <- 'Intensity'
sum(is.na(raw$Intensity))
sum(raw$Intensity==0)
raw$pepprecursor<-paste(raw$PeptideSequence, raw$PrecursorCharge, sep="_")
data_w = dcast( Run ~ pepprecursor, data=raw, value.var='Intensity', fun.aggregate=sum, fill=NULL)
newdata = melt(data_w, id.vars=c('Run'))
colnames(newdata)[colnames(newdata) %in% c("variable","value")]<-c('pepprecursor','Intensity')
uniinfo<-unique(raw[,c("ProteinName","PeptideSequence","PrecursorCharge","pepprecursor")])
newraw<-merge(newdata,uniinfo, by="pepprecursor")
uniinfo<-unique(raw[,c("Run","BioReplicate","Condition")])
newraw<-merge(newraw,uniinfo, by="Run")
newraw$BioReplicate<-1
newraw$FragmentIon<-"sum"
newraw$ProductCharge<-NA
newraw$IsotopeLabelType<-"L"
raw<-newraw
sum(is.na(raw$Intensity))
sum(raw$Intensity==0)
<<<<<<< HEAD
q1 <- quote(1+1)
q1
foo <- function(x) {
browser()
y <- x + 1
print(y)
}
foo(10)
foo2 <- function(x) {
y <- x + 1
print(y)
}
debug(foo2)
foo2(10)
undebug(foo2)
foo2(10)
df3 <- data.frame2(a=1:10, b=letters[1:10])
data.frame2 <- function(...) {
df <- data.frame(...)
class(df) <- c("data.frame2", "data.frame")
df
}
mean2 <- function(x, ...) UseMethod("mean2")
mean2.default <- function(x, ...) UseMethod("mean")
mean2.data.frame2 <- function(x, ...) {
sapply(x, mean2, ...)
}
df2 <- data.frame2(x=1:10, y=11:20)
mean2(df2)
df3 <- data.frame2(a=1:10, b=letters[1:10])
df3
mean2(df3)
options(warn=2)
mean2(df3)
traceback()
options(error=recover)
mean2(df3)
q
q
ls()
x
X
0
q
options(error=NULL, warn=0)
library(dplyr)
bigdf <- data.frame(x=rnorm(10^7), y=sample(letters, 10^7, replace=TRUE))
print(object.size(bigdf), units="Mb")
system.time(subset(bigdf, x > 3 & y == "y"))
system.time(filter(bigdf, x > 3 & y == "y"))
=======
library(MSstats)
?"MSstats"
>>>>>>> f504e2d3835191f49841a5958faca1e203c67c84
